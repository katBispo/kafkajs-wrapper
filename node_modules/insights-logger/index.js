const winston = require('winston');
const config = require('config');
class Logger {
    constructor() {
        this.level = config.get('logging.level');
        this._logger = new winston.Logger({
            level: this.level,
            transports: [new winston.transports.Console({
                formatter: options => {
                    return options.message;
                }
            })]
        });
    }
    createLogObject(message, data, level) {
        let loggingData = JSON.parse(JSON.stringify(data));
        return JSON.stringify({
            resourceId: this.resourceId,
            message,
            timestamp: new Date().toISOString(),
            level: level,
            loggingData
        });
    }

    info(message, data = {}) {
        this._logger.info(this.createLogObject(message, data, 'info'));
    }

    error(error, data = {}) {
        this._logger.error(this.createLogObject(error, data, 'error'));
    }

    warn(error, data = {}) {
        this._logger.error(this.createLogObject(error, data, 'warn'));
    }

    debug(message, data = {}) {
        this._logger.debug(this.createLogObject(message, data, 'debug'));
    }

    log(message) {
        this._logger.info(this.createLogObject(message, {}, 'info'));
    }
}
module.exports.Logger = Logger;