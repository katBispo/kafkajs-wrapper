const kafkaConsumer = require('./Consumer');
const kafkaProducer = require('./producer');

class KafkaWrapper {
  constructor() {
    this.ready = false;
    this.kafkaConsumer = null;
    this.kafkaProducer = null;
  }

  async connect({ consumer, producer }) {
    try {
      if (this.ready) return;

      this.kafkaConsumer = consumer;
      this.kafkaProducer = producer;

      await this.kafkaConsumer.start();
      await this.kafkaProducer.start();

      this.ready = true;
      console.log('Connected to Kafka');
    } catch (error) {
      console.error('Error connecting to Kafka:', error);
      throw error;
    }
  }

  async send({ topic, messages }) {
    try {
      if (!this.ready || !this.kafkaProducer) throw new Error('Kafka producer is not ready');

      await this.kafkaProducer.produce({ topic, messages });

      console.log('Message sent to Kafka producer');
    } catch (error) {
      console.error('Error sending message:', error);
      throw error;
    }
  }

  async subscribe({ topicsList, onData, onError, autoCommit }) {
    try {
      if (!this.ready || !this.kafkaConsumer) throw new Error('Kafka consumer is not ready');

      await this.kafkaConsumer.start({ topicsList, onData, onError, autoCommit });

      console.log('Subscribed to Kafka topics');
    } catch (error) {
      console.error('Error subscribing to topics:', error);
      throw error;
    }
  }

  async disconnect() {
    try {
      if (!this.ready) return;

      await this.kafkaConsumer.stop();
      await this.kafkaProducer.stop();
      this.ready = false;

      console.log('Disconnected from Kafka');
    } catch (error) {
      console.error('Error disconnecting from Kafka:', error);
      throw error;
    }
  }
}

module.exports = KafkaWrapper;
